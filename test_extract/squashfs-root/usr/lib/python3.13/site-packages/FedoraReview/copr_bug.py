#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
# (C) 2017 - clime <clime@redhat.com>

"""
Tool to generate review from a COPR build.
"""

from __future__ import print_function

import json
import os
import platform
import re
import sys

from six.moves.urllib.request import urlopen

from .review_dirs import ReviewDirs
from .review_error import ReviewError
from .settings import Settings
from .url_bug import UrlBug

COPR_HOST = "http://copr.fedorainfracloud.org"
COPR_API_URL_TEMPLATE = COPR_HOST + "/api_3/build/{}"
COPR_API_CHROOT_URL_TEMPLATE =\
    COPR_HOST + "/api_3/build-chroot?build_id={0}&chrootname={1}"


def get_build_data(build_id):
    """Fetch build data from COPR and return them as json"""
    build_data_file = urlopen(COPR_API_URL_TEMPLATE.format(build_id))
    build = json.load(build_data_file)

    build["results_by_chroot"] = {}
    for chrootname in build["chroots"]:
        if not chrootname.startswith("fedora-"):
            continue
        url = COPR_API_CHROOT_URL_TEMPLATE.format(build["id"], chrootname)
        chroot = json.load(urlopen(url))
        build["results_by_chroot"][chrootname] = chroot["result_url"]

    return build


class CoprBug(UrlBug):
    """This class is used for running review on a COPR build"""

    def __init__(self, build_descriptor):
        """Constructor.
        :arg build_id: numeric id of COPR build or direct frontend or backend
        build uri
        """
        self.log = Settings.get_logger()

        if build_descriptor.startswith(("http://", "https://")):
            build_id = self.parse_build_id_from_uri(build_descriptor)
        else:
            build_id = build_descriptor.lstrip("0")

        uri = self.get_location(build_id)
        UrlBug.__init__(self, uri)
        self.rpm_urls = None

        builddir_name = "copr-build-" + build_id
        self.copr_build_dir = os.path.join(os.getcwd(), builddir_name)
        try:
            os.makedirs(self.copr_build_dir)
        except os.error:
            self.log.error(
                "Build directory ./%s cannot be created or exists already.",
                builddir_name,
            )
            sys.exit(1)

        self.dir = self.copr_build_dir
        ReviewDirs.startdir = self.dir
        os.chdir(self.dir)

    def find_urls(self):
        """Retrieve the page and parse srpm, rpm and spec url."""
        # pylint: disable=bare-except
        self.log.info("Getting .spec, .srpm, .rpm")
        try:
            self.find_srpm_url()
            self.log.info("  --> SRPM url: %s", self.srpm_url)
            self.find_spec_url()
            self.log.info("  --> Spec url: %s", self.spec_url)
            self.find_rpm_urls()
            self.log.info("  --> RPM urls: %s", " ".join(self.rpm_urls))
        except ReviewError as fre:
            raise fre
        except Exception:
            self.log.debug("build link parse error", exc_info=True)
            self.log.error("Cannot find usable urls here.")
            return False
        return True

    def find_rpm_urls(self):
        """Get rpm urls for the build"""
        urls = self._find_urls_by_ending(".rpm")
        filtered_urls = []
        for url in urls:
            if not re.match(r".*.src.rpm$", url):
                filtered_urls.append(url)
        if not filtered_urls:
            raise self.BugError("Cannot find rpm URL")
        self.rpm_urls = filtered_urls

    def do_download_files(self):
        """Download all the necessary files"""
        self.log.info("Downloading .spec, .srpm, .rpm")
        if not self.srpm_file:
            self.do_download_srpm()
        if not self.spec_file:
            self.do_download_spec()
        self.do_download_rpms()
        return True

    def do_download_rpms(self):
        """
        Download the rpms extracted from the page to cwd.
        Raises IOError.
        """
        for rpm_url in self.rpm_urls:
            rpm_name = os.path.basename(rpm_url)
            rpm_path = os.path.join(self.copr_build_dir, rpm_name)
            self.urlretrieve(rpm_url, rpm_path)

    def parse_build_id_from_uri(self, uri):
        """Get the COPR build-id from a given uri"""
        uri_last_part = os.path.basename(uri.strip("/"))
        match = re.match(r"(\d+).*", uri_last_part)
        if not match:
            self.log.error("Invalid build uri: %s.", uri)
            sys.exit(1)
        return match.group(1).lstrip("0")

    def get_location(self, build_id):
        """Get COPR build URI"""
        build_data = get_build_data(build_id)
        state = build_data.get("state", "unknown")
        if state != "succeeded":
            self.log.error("Copr build did not succeed, state=%s", state)
            sys.exit(1)

        required_chroot = "fedora-rawhide-" + platform.machine()
        chroots = build_data.get("chroots", [])
        if required_chroot not in chroots:
            self.log.error("%s chroot not found. Exiting.", required_chroot)
            sys.exit(1)
        return build_data["results_by_chroot"][required_chroot]

    def check_options(self):  # pylint: disable=R0201
        """Raise error if Settings combination is invalid."""
        UrlBug.do_check_options("--copr-build", ["other_bz", "url"])


# vim: set expandtab ts=4 sw=4:
